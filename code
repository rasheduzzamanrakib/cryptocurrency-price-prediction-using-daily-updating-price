{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7cb6db7a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-10-30T17:20:09.743245Z",
     "iopub.status.busy": "2025-10-30T17:20:09.742921Z",
     "iopub.status.idle": "2025-10-30T17:20:12.011109Z",
     "shell.execute_reply": "2025-10-30T17:20:12.009752Z"
    },
    "papermill": {
     "duration": 2.275063,
     "end_time": "2025-10-30T17:20:12.012920",
     "exception": false,
     "start_time": "2025-10-30T17:20:09.737857",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/daily-crypto-tracker-dataset/daily_crypto_tracker.csv\n"
     ]
    }
   ],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8e096358",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-30T17:20:12.021213Z",
     "iopub.status.busy": "2025-10-30T17:20:12.020768Z",
     "iopub.status.idle": "2025-10-30T17:20:15.440834Z",
     "shell.execute_reply": "2025-10-30T17:20:15.439231Z"
    },
    "papermill": {
     "duration": 3.426118,
     "end_time": "2025-10-30T17:20:15.442812",
     "exception": false,
     "start_time": "2025-10-30T17:20:12.016694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "96748663",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-30T17:20:15.450759Z",
     "iopub.status.busy": "2025-10-30T17:20:15.450244Z",
     "iopub.status.idle": "2025-10-30T17:20:15.510370Z",
     "shell.execute_reply": "2025-10-30T17:20:15.508710Z"
    },
    "papermill": {
     "duration": 0.065982,
     "end_time": "2025-10-30T17:20:15.512157",
     "exception": false,
     "start_time": "2025-10-30T17:20:15.446175",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   fetch_date  rank           id symbol      name  current_price  \\\n",
      "0  2025-10-29     1      bitcoin    btc   Bitcoin      111531.00   \n",
      "1  2025-10-29     2     ethereum    eth  Ethereum        3943.57   \n",
      "2  2025-10-29     3       tether   usdt    Tether           1.00   \n",
      "3  2025-10-29     4       ripple    xrp       XRP           2.60   \n",
      "4  2025-10-29     5  binancecoin    bnb       BNB        1117.82   \n",
      "\n",
      "      market_cap  total_volume   high_24h    low_24h  \\\n",
      "0  2224148527393  6.685860e+10  113567.00  110020.00   \n",
      "1   475767427104  3.514209e+10    4034.05    3890.47   \n",
      "2   183403228857  1.115202e+11       1.00       1.00   \n",
      "3   155708234292  4.881031e+09       2.66       2.57   \n",
      "4   153956854014  3.245373e+09    1121.14    1087.79   \n",
      "\n",
      "   price_change_percentage_24h              last_updated  \n",
      "0                     -0.83673  2025-10-29T21:10:35.159Z  \n",
      "1                     -0.14286  2025-10-29T21:10:35.069Z  \n",
      "2                      0.00947  2025-10-29T21:10:33.457Z  \n",
      "3                      0.20716  2025-10-29T21:10:41.673Z  \n",
      "4                      2.76021  2025-10-29T21:10:34.331Z  \n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 100 entries, 0 to 99\n",
      "Data columns (total 12 columns):\n",
      " #   Column                       Non-Null Count  Dtype  \n",
      "---  ------                       --------------  -----  \n",
      " 0   fetch_date                   100 non-null    object \n",
      " 1   rank                         100 non-null    int64  \n",
      " 2   id                           100 non-null    object \n",
      " 3   symbol                       100 non-null    object \n",
      " 4   name                         100 non-null    object \n",
      " 5   current_price                100 non-null    float64\n",
      " 6   market_cap                   100 non-null    int64  \n",
      " 7   total_volume                 100 non-null    float64\n",
      " 8   high_24h                     100 non-null    float64\n",
      " 9   low_24h                      100 non-null    float64\n",
      " 10  price_change_percentage_24h  100 non-null    float64\n",
      " 11  last_updated                 100 non-null    object \n",
      "dtypes: float64(5), int64(2), object(5)\n",
      "memory usage: 9.5+ KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_csv(\"/kaggle/input/daily-crypto-tracker-dataset/daily_crypto_tracker.csv\")\n",
    "print(df.head())\n",
    "print(df.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ebdcd752",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-30T17:20:15.521290Z",
     "iopub.status.busy": "2025-10-30T17:20:15.520933Z",
     "iopub.status.idle": "2025-10-30T17:20:15.540047Z",
     "shell.execute_reply": "2025-10-30T17:20:15.538734Z"
    },
    "papermill": {
     "duration": 0.025968,
     "end_time": "2025-10-30T17:20:15.541894",
     "exception": false,
     "start_time": "2025-10-30T17:20:15.515926",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Features ready: (100, 8)\n",
      "🎯 Target ready: (100,)\n"
     ]
    }
   ],
   "source": [
    "df_clean = df.drop(columns=['price_change_percentage_24h', 'fetch_date', 'id', 'symbol'])\n",
    "df_clean = df_clean.dropna()\n",
    "df_clean['is_gain'] = (\n",
    "    df_clean['current_price'] > df_clean['current_price'].shift(1).fillna(df_clean['current_price'])\n",
    ").astype(int)\n",
    "\n",
    "df_clean = df_clean.dropna()\n",
    "X = df_clean.drop(columns=['is_gain'])\n",
    "y = df_clean['is_gain']\n",
    "print(\"✅ Features ready:\", X.shape)\n",
    "print(\"🎯 Target ready:\", y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c4dd6915",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-30T17:20:15.554987Z",
     "iopub.status.busy": "2025-10-30T17:20:15.554478Z",
     "iopub.status.idle": "2025-10-30T17:20:15.564688Z",
     "shell.execute_reply": "2025-10-30T17:20:15.563421Z"
    },
    "papermill": {
     "duration": 0.021712,
     "end_time": "2025-10-30T17:20:15.568098",
     "exception": false,
     "start_time": "2025-10-30T17:20:15.546386",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100, 12)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a8372461",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-30T17:20:15.580291Z",
     "iopub.status.busy": "2025-10-30T17:20:15.579783Z",
     "iopub.status.idle": "2025-10-30T17:20:15.592669Z",
     "shell.execute_reply": "2025-10-30T17:20:15.591065Z"
    },
    "papermill": {
     "duration": 0.022335,
     "end_time": "2025-10-30T17:20:15.595779",
     "exception": false,
     "start_time": "2025-10-30T17:20:15.573444",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "📂 Train size: (80, 8)\n",
      "📂 Test size: (20, 8)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)\n",
    "print(\"📂 Train size:\", X_train.shape)\n",
    "print(\"📂 Test size:\", X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7cfa4f1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-30T17:20:15.609973Z",
     "iopub.status.busy": "2025-10-30T17:20:15.609487Z",
     "iopub.status.idle": "2025-10-30T17:20:16.151157Z",
     "shell.execute_reply": "2025-10-30T17:20:16.150084Z"
    },
    "papermill": {
     "duration": 0.551112,
     "end_time": "2025-10-30T17:20:16.152951",
     "exception": false,
     "start_time": "2025-10-30T17:20:15.601839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "📊 Random Forest Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.83      0.87        12\n",
      "           1       0.78      0.88      0.82         8\n",
      "\n",
      "    accuracy                           0.85        20\n",
      "   macro avg       0.84      0.85      0.85        20\n",
      "weighted avg       0.86      0.85      0.85        20\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.85\n"
     ]
    }
   ],
   "source": [
    "#1_Random Forest\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
    "\n",
    "# Encode categorical features in X_train and X_test\n",
    "X_train_encoded = pd.get_dummies(X_train)\n",
    "X_test_encoded = pd.get_dummies(X_test)\n",
    "\n",
    "# Align train and test encoded data to have same columns\n",
    "X_train_encoded, X_test_encoded = X_train_encoded.align(X_test_encoded, join='left', axis=1, fill_value=0)\n",
    "\n",
    "rf_model = RandomForestClassifier(random_state=42)\n",
    "rf_model.fit(X_train_encoded, y_train)\n",
    "\n",
    "rf_preds = rf_model.predict(X_test_encoded)\n",
    "\n",
    "print(\"📊 Random Forest Report:\")\n",
    "print(classification_report(y_test, rf_preds))\n",
    "\n",
    "rf_cm = confusion_matrix(y_test, rf_preds)\n",
    "sns.heatmap(rf_cm, annot=True, fmt='d', cmap='Blues')\n",
    "plt.title(\"Random Forest Confusion Matrix\")\n",
    "plt.show()\n",
    "\n",
    "accuracy = accuracy_score(y_test, rf_preds)\n",
    "print(\"Accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c202af8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-30T17:20:16.162191Z",
     "iopub.status.busy": "2025-10-30T17:20:16.161897Z",
     "iopub.status.idle": "2025-10-30T17:20:16.469226Z",
     "shell.execute_reply": "2025-10-30T17:20:16.468157Z"
    },
    "papermill": {
     "duration": 0.314343,
     "end_time": "2025-10-30T17:20:16.471363",
     "exception": false,
     "start_time": "2025-10-30T17:20:16.157020",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "📊 Logistic Regression Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.67      0.50      0.57        12\n",
      "           1       0.45      0.62      0.53         8\n",
      "\n",
      "    accuracy                           0.55        20\n",
      "   macro avg       0.56      0.56      0.55        20\n",
      "weighted avg       0.58      0.55      0.55        20\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.55\n"
     ]
    }
   ],
   "source": [
    "#2_Logistic Regression\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
    "\n",
    "# Encode categorical features\n",
    "X_train_encoded = pd.get_dummies(X_train)\n",
    "X_test_encoded = pd.get_dummies(X_test)\n",
    "\n",
    "# Align columns of train and test sets\n",
    "X_train_encoded, X_test_encoded = X_train_encoded.align(X_test_encoded, join='left', axis=1, fill_value=0)\n",
    "\n",
    "log_model = LogisticRegression(max_iter=1000)\n",
    "log_model.fit(X_train_encoded, y_train)\n",
    "\n",
    "log_preds = log_model.predict(X_test_encoded)\n",
    "\n",
    "print(\"📊 Logistic Regression Report:\")\n",
    "print(classification_report(y_test, log_preds))\n",
    "\n",
    "log_cm = confusion_matrix(y_test, log_preds)\n",
    "sns.heatmap(log_cm, annot=True, fmt='d', cmap='Purples')\n",
    "plt.title(\"Logistic Regression Confusion Matrix\")\n",
    "plt.show()\n",
    "\n",
    "accuracy = accuracy_score(y_test, log_preds)\n",
    "print(\"Accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a591150b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-30T17:20:16.482112Z",
     "iopub.status.busy": "2025-10-30T17:20:16.481751Z",
     "iopub.status.idle": "2025-10-30T17:20:46.366087Z",
     "shell.execute_reply": "2025-10-30T17:20:46.364904Z"
    },
    "papermill": {
     "duration": 29.891811,
     "end_time": "2025-10-30T17:20:46.367860",
     "exception": false,
     "start_time": "2025-10-30T17:20:16.476049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-10-30 17:20:19.106144: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1761844819.468292      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1761844819.563450      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "2025-10-30 17:20:39.104365: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n",
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 151ms/step - accuracy: 0.4964 - loss: 0.7015 - val_accuracy: 0.6000 - val_loss: 0.6874\n",
      "Epoch 2/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.5405 - loss: 0.6714 - val_accuracy: 0.6000 - val_loss: 0.6842\n",
      "Epoch 3/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 30ms/step - accuracy: 0.8307 - loss: 0.6014 - val_accuracy: 0.6000 - val_loss: 0.6811\n",
      "Epoch 4/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step - accuracy: 0.9255 - loss: 0.5610 - val_accuracy: 0.6000 - val_loss: 0.6778\n",
      "Epoch 5/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step - accuracy: 0.9047 - loss: 0.5421 - val_accuracy: 0.6500 - val_loss: 0.6749\n",
      "Epoch 6/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - accuracy: 0.9564 - loss: 0.4884 - val_accuracy: 0.6500 - val_loss: 0.6720\n",
      "Epoch 7/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9691 - loss: 0.4567 - val_accuracy: 0.6500 - val_loss: 0.6694\n",
      "Epoch 8/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 1.0000 - loss: 0.4104 - val_accuracy: 0.6500 - val_loss: 0.6666\n",
      "Epoch 9/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 1.0000 - loss: 0.4087 - val_accuracy: 0.6500 - val_loss: 0.6636\n",
      "Epoch 10/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9845 - loss: 0.3662 - val_accuracy: 0.6500 - val_loss: 0.6611\n",
      "Epoch 11/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 1.0000 - loss: 0.3312 - val_accuracy: 0.6500 - val_loss: 0.6590\n",
      "Epoch 12/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 1.0000 - loss: 0.2926 - val_accuracy: 0.6500 - val_loss: 0.6565\n",
      "Epoch 13/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 1.0000 - loss: 0.2811 - val_accuracy: 0.6500 - val_loss: 0.6539\n",
      "Epoch 14/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 1.0000 - loss: 0.2478 - val_accuracy: 0.6500 - val_loss: 0.6515\n",
      "Epoch 15/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 1.0000 - loss: 0.2263 - val_accuracy: 0.6500 - val_loss: 0.6491\n",
      "Epoch 16/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 1.0000 - loss: 0.2088 - val_accuracy: 0.6500 - val_loss: 0.6468\n",
      "Epoch 17/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - accuracy: 1.0000 - loss: 0.1830 - val_accuracy: 0.6500 - val_loss: 0.6446\n",
      "Epoch 18/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 1.0000 - loss: 0.1718 - val_accuracy: 0.6500 - val_loss: 0.6428\n",
      "Epoch 19/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 31ms/step - accuracy: 1.0000 - loss: 0.1594 - val_accuracy: 0.6500 - val_loss: 0.6408\n",
      "Epoch 20/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step - accuracy: 1.0000 - loss: 0.1296 - val_accuracy: 0.6500 - val_loss: 0.6389\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 284ms/step\n",
      "📊 LSTM Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.63      1.00      0.77        12\n",
      "           1       1.00      0.12      0.22         8\n",
      "\n",
      "    accuracy                           0.65        20\n",
      "   macro avg       0.82      0.56      0.50        20\n",
      "weighted avg       0.78      0.65      0.55        20\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.65\n"
     ]
    }
   ],
   "source": [
    "#3_LSTM\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import LSTM, Dense, Dropout\n",
    "\n",
    "#=============================\n",
    "# 1. Encode target variable if categorical\n",
    "#=============================\n",
    "if y_train.dtype == 'object':\n",
    "    le = LabelEncoder()\n",
    "    y_train = le.fit_transform(y_train)\n",
    "    y_test = le.transform(y_test)\n",
    "\n",
    "#=============================\n",
    "# 2. Encode categorical features\n",
    "#=============================\n",
    "X_train_encoded = pd.get_dummies(X_train)\n",
    "X_test_encoded = pd.get_dummies(X_test)\n",
    "\n",
    "# Align train/test columns\n",
    "X_train_encoded, X_test_encoded = X_train_encoded.align(X_test_encoded, join='left', axis=1, fill_value=0)\n",
    "\n",
    "#=============================\n",
    "# 3. Scale features\n",
    "#=============================\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train_encoded)\n",
    "X_test_scaled = scaler.transform(X_test_encoded)\n",
    "\n",
    "#=============================\n",
    "# 4. Reshape for LSTM [samples, timesteps, features]\n",
    "#=============================\n",
    "# এখানে timesteps=1 দেওয়া হলো (যদি multi-step sequence লাগলে পরিবর্তন করো)\n",
    "X_train_lstm = X_train_scaled.reshape((X_train_scaled.shape[0], 1, X_train_scaled.shape[1]))\n",
    "X_test_lstm = X_test_scaled.reshape((X_test_scaled.shape[0], 1, X_test_scaled.shape[1]))\n",
    "\n",
    "#=============================\n",
    "# 5. Build LSTM model\n",
    "#=============================\n",
    "model = Sequential()\n",
    "model.add(LSTM(64, input_shape=(X_train_lstm.shape[1], X_train_lstm.shape[2]), activation='tanh'))\n",
    "model.add(Dropout(0.3))\n",
    "model.add(Dense(1, activation='sigmoid'))  # Binary classification; multi-class হলে softmax\n",
    "\n",
    "model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "#=============================\n",
    "# 6. Train model\n",
    "#=============================\n",
    "history = model.fit(X_train_lstm, y_train,\n",
    "                    epochs=20,\n",
    "                    batch_size=16,\n",
    "                    validation_data=(X_test_lstm, y_test),\n",
    "                    verbose=1)\n",
    "\n",
    "#=============================\n",
    "# 7. Predictions\n",
    "#=============================\n",
    "y_pred_prob = model.predict(X_test_lstm)\n",
    "y_pred = (y_pred_prob > 0.5).astype(int)\n",
    "\n",
    "#=============================\n",
    "# 8. Evaluation\n",
    "#=============================\n",
    "print(\"📊 LSTM Report:\")\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "lstm_cm = confusion_matrix(y_test, y_pred)\n",
    "sns.heatmap(lstm_cm, annot=True, fmt='d', cmap='Oranges')\n",
    "plt.title(\"LSTM Confusion Matrix\")\n",
    "plt.show()\n",
    "\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1652d99d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-30T17:20:46.386644Z",
     "iopub.status.busy": "2025-10-30T17:20:46.385975Z",
     "iopub.status.idle": "2025-10-30T17:20:51.836016Z",
     "shell.execute_reply": "2025-10-30T17:20:51.834844Z"
    },
    "papermill": {
     "duration": 5.461106,
     "end_time": "2025-10-30T17:20:51.837603",
     "exception": false,
     "start_time": "2025-10-30T17:20:46.376497",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "1/1 - 5s - 5s/step - accuracy: 0.5312 - loss: 0.6900 - val_accuracy: 0.6250 - val_loss: 0.6936\n",
      "Epoch 2/50\n",
      "1/1 - 0s - 100ms/step - accuracy: 0.5000 - loss: 0.6933 - val_accuracy: 0.6250 - val_loss: 0.6933\n",
      "Epoch 3/50\n",
      "1/1 - 0s - 103ms/step - accuracy: 0.5312 - loss: 0.6912 - val_accuracy: 0.6250 - val_loss: 0.6935\n",
      "Epoch 4/50\n",
      "1/1 - 0s - 107ms/step - accuracy: 0.6875 - loss: 0.6890 - val_accuracy: 0.5000 - val_loss: 0.6940\n",
      "Epoch 5/50\n",
      "1/1 - 0s - 103ms/step - accuracy: 0.6875 - loss: 0.6900 - val_accuracy: 0.5000 - val_loss: 0.6944\n",
      "Final Test Accuracy: 62.50%\n"
     ]
    }
   ],
   "source": [
    "#4_GRU Model Code\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "import random\n",
    "\n",
    "# 1. Fix seeds for reproducibility\n",
    "seed = 42\n",
    "np.random.seed(seed)\n",
    "tf.random.set_seed(seed)\n",
    "random.seed(seed)\n",
    "\n",
    "# 2. Your other imports and code\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, Embedding, GRU, Dense, Dropout\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from sklearn.model_selection import train_test_split\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# 3. Your dataset and preprocessing\n",
    "texts = [\n",
    "    # Positive examples (20)\n",
    "    'this is a great movie', 'i really enjoyed this film', 'the movie was fantastic', 'absolutely brilliant plot',\n",
    "    'i loved this movie', 'one of the best films ever', 'superb acting by the cast', 'a truly moving story',\n",
    "    'highly recommend this picture', 'wonderful experience from start to finish', 'two thumbs up', 'amazing direction',\n",
    "    'a must-see film for everyone', 'the visuals were stunning', 'excellent screenplay', 'perfect in every way',\n",
    "    'i was captivated throughout', 'an unforgettable journey', 'the soundtrack was beautiful', 'masterfully crafted',\n",
    "    # Negative examples (20)\n",
    "    'this movie was terrible', 'i did not like the film', 'the acting was awful', 'a complete waste of time',\n",
    "    'i hated every moment of it', 'the plot was boring and predictable', 'worst film of the year', 'do not watch this',\n",
    "    'a disappointing experience', 'the script was very weak', 'i fell asleep halfway through', 'a total failure',\n",
    "    'the characters were one-dimensional', 'it was incredibly slow', 'nothing special about it', 'i want my money back',\n",
    "    'a confusing and messy plot', 'the ending was horrible', 'poorly executed idea', 'I would not recommend it'\n",
    "]\n",
    "labels = np.array([1]*20 + [0]*20)\n",
    "\n",
    "tokenizer = Tokenizer(num_words=2000, oov_token=\"<unk>\")\n",
    "tokenizer.fit_on_texts(texts)\n",
    "sequences = tokenizer.texts_to_sequences(texts)\n",
    "max_length = max(len(seq) for seq in sequences)\n",
    "padded_sequences = pad_sequences(sequences, maxlen=max_length, padding='post')\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    padded_sequences, labels, test_size=0.2, random_state=seed\n",
    ")\n",
    "\n",
    "vocab_size = len(tokenizer.word_index) + 1\n",
    "embedding_dim = 32\n",
    "\n",
    "model = Sequential([\n",
    "    Input(shape=(max_length,)),\n",
    "    Embedding(input_dim=vocab_size, output_dim=embedding_dim),\n",
    "    GRU(units=64),\n",
    "    Dropout(0.5),\n",
    "    Dense(units=1, activation='sigmoid')\n",
    "])\n",
    "\n",
    "model.compile(optimizer='adam',\n",
    "              loss='binary_crossentropy',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "early_stopping = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n",
    "\n",
    "history = model.fit(X_train, y_train,\n",
    "                    epochs=50,\n",
    "                    validation_data=(X_test, y_test),\n",
    "                    callbacks=[early_stopping],\n",
    "                    verbose=2)\n",
    "\n",
    "loss, accuracy = model.evaluate(X_test, y_test, verbose=0)\n",
    "print(f\"Final Test Accuracy: {accuracy*100:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2f3a9537",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-30T17:20:51.858356Z",
     "iopub.status.busy": "2025-10-30T17:20:51.857980Z",
     "iopub.status.idle": "2025-10-30T17:20:51.866704Z",
     "shell.execute_reply": "2025-10-30T17:20:51.865095Z"
    },
    "papermill": {
     "duration": 0.02142,
     "end_time": "2025-10-30T17:20:51.869033",
     "exception": false,
     "start_time": "2025-10-30T17:20:51.847613",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Ensure X_train / X_test are DataFrames\n",
    "if isinstance(X_train, np.ndarray):\n",
    "    X_train = pd.DataFrame(X_train)\n",
    "if isinstance(X_test, np.ndarray):\n",
    "    X_test = pd.DataFrame(X_test)\n",
    "\n",
    "# Now safe to handle categoricals\n",
    "categorical_cols = X_train.select_dtypes(include=['object']).columns\n",
    "\n",
    "if len(categorical_cols) > 0:\n",
    "    X_train_encoded = pd.get_dummies(X_train, columns=categorical_cols)\n",
    "    X_test_encoded = pd.get_dummies(X_test, columns=categorical_cols)\n",
    "    X_train_encoded, X_test_encoded = X_train_encoded.align(X_test_encoded, join='left', axis=1, fill_value=0)\n",
    "else:\n",
    "    X_train_encoded, X_test_encoded = X_train, X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "27695114",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-30T17:20:51.889358Z",
     "iopub.status.busy": "2025-10-30T17:20:51.888955Z",
     "iopub.status.idle": "2025-10-30T17:20:52.649955Z",
     "shell.execute_reply": "2025-10-30T17:20:52.648012Z"
    },
    "papermill": {
     "duration": 0.773402,
     "end_time": "2025-10-30T17:20:52.651726",
     "exception": false,
     "start_time": "2025-10-30T17:20:51.878324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\tTest-logloss:0.66664\n",
      "[1]\tTest-logloss:0.64789\n",
      "[2]\tTest-logloss:0.61323\n",
      "[3]\tTest-logloss:0.59510\n",
      "[4]\tTest-logloss:0.58762\n",
      "[5]\tTest-logloss:0.55896\n",
      "[6]\tTest-logloss:0.54187\n",
      "[7]\tTest-logloss:0.53491\n",
      "[8]\tTest-logloss:0.52293\n",
      "[9]\tTest-logloss:0.53101\n",
      "[10]\tTest-logloss:0.53503\n",
      "[11]\tTest-logloss:0.51775\n",
      "[12]\tTest-logloss:0.50183\n",
      "[13]\tTest-logloss:0.50622\n",
      "[14]\tTest-logloss:0.51251\n",
      "[15]\tTest-logloss:0.51246\n",
      "[16]\tTest-logloss:0.51942\n",
      "[17]\tTest-logloss:0.51271\n",
      "[18]\tTest-logloss:0.51604\n",
      "[19]\tTest-logloss:0.51330\n",
      "[20]\tTest-logloss:0.49905\n",
      "[21]\tTest-logloss:0.50631\n",
      "[22]\tTest-logloss:0.50851\n",
      "[23]\tTest-logloss:0.50322\n",
      "[24]\tTest-logloss:0.50574\n",
      "[25]\tTest-logloss:0.49419\n",
      "[26]\tTest-logloss:0.50232\n",
      "[27]\tTest-logloss:0.50518\n",
      "[28]\tTest-logloss:0.51507\n",
      "[29]\tTest-logloss:0.51643\n",
      "[30]\tTest-logloss:0.52295\n",
      "[31]\tTest-logloss:0.52626\n",
      "[32]\tTest-logloss:0.52353\n",
      "[33]\tTest-logloss:0.52840\n",
      "[34]\tTest-logloss:0.52953\n",
      "[35]\tTest-logloss:0.53949\n",
      "[36]\tTest-logloss:0.54666\n",
      "[37]\tTest-logloss:0.54834\n",
      "[38]\tTest-logloss:0.55621\n",
      "[39]\tTest-logloss:0.56413\n",
      "[40]\tTest-logloss:0.56760\n",
      "[41]\tTest-logloss:0.56405\n",
      "[42]\tTest-logloss:0.56554\n",
      "[43]\tTest-logloss:0.57064\n",
      "[44]\tTest-logloss:0.57139\n",
      "[45]\tTest-logloss:0.57838\n",
      "📊 XGBoost Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.33      0.50         3\n",
      "           1       0.71      1.00      0.83         5\n",
      "\n",
      "    accuracy                           0.75         8\n",
      "   macro avg       0.86      0.67      0.67         8\n",
      "weighted avg       0.82      0.75      0.71         8\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7500\n",
      "ROC-AUC: 0.8000\n"
     ]
    }
   ],
   "source": [
    "#5_XGBoost\n",
    "import xgboost as xgb\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_auc_score\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Handle categorical only\n",
    "categorical_cols = X_train.select_dtypes(include=['object']).columns\n",
    "if len(categorical_cols) > 0:\n",
    "    X_train_encoded = pd.get_dummies(X_train, columns=categorical_cols)\n",
    "    X_test_encoded = pd.get_dummies(X_test, columns=categorical_cols)\n",
    "    X_train_encoded, X_test_encoded = X_train_encoded.align(X_test_encoded, join='left', axis=1, fill_value=0)\n",
    "else:\n",
    "    X_train_encoded, X_test_encoded = X_train, X_test\n",
    "\n",
    "# Convert to DMatrix\n",
    "dtrain = xgb.DMatrix(X_train_encoded, label=y_train)\n",
    "dtest = xgb.DMatrix(X_test_encoded, label=y_test)\n",
    "\n",
    "# Parameters\n",
    "params = {\n",
    "    'objective': 'binary:logistic',\n",
    "    'eval_metric': 'logloss',\n",
    "    'eta': 0.1,\n",
    "    'max_depth': 6,\n",
    "    'subsample': 0.8,\n",
    "    'colsample_bytree': 0.8,\n",
    "    'seed': 42\n",
    "}\n",
    "\n",
    "# Train model\n",
    "xgb_model = xgb.train(params, dtrain, num_boost_round=200,\n",
    "                      evals=[(dtest, \"Test\")], early_stopping_rounds=20)\n",
    "\n",
    "# Predict\n",
    "xgb_preds_prob = xgb_model.predict(dtest)\n",
    "xgb_preds = (xgb_preds_prob > 0.5).astype(int)\n",
    "\n",
    "# Evaluation\n",
    "print(\"📊 XGBoost Report:\")\n",
    "print(classification_report(y_test, xgb_preds))\n",
    "\n",
    "xgb_cm = confusion_matrix(y_test, xgb_preds)\n",
    "sns.heatmap(xgb_cm, annot=True, fmt='d', cmap='Greens')\n",
    "plt.title(\"XGBoost Confusion Matrix\")\n",
    "plt.show()\n",
    "\n",
    "accuracy = accuracy_score(y_test, xgb_preds)\n",
    "roc_auc = roc_auc_score(y_test, xgb_preds_prob)\n",
    "print(f\"Accuracy: {accuracy:.4f}\")\n",
    "print(f\"ROC-AUC: {roc_auc:.4f}\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7855118,
     "sourceId": 12791677,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 53.226597,
   "end_time": "2025-10-30T17:20:56.196747",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-30T17:20:02.970150",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
