{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8823965e",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-18T14:22:29.808698Z",
     "iopub.status.busy": "2025-08-18T14:22:29.808421Z",
     "iopub.status.idle": "2025-08-18T14:22:31.523433Z",
     "shell.execute_reply": "2025-08-18T14:22:31.522544Z"
    },
    "papermill": {
     "duration": 1.721343,
     "end_time": "2025-08-18T14:22:31.525280",
     "exception": false,
     "start_time": "2025-08-18T14:22:29.803937",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/daily-crypto-tracker-dataset/daily_crypto_tracker.csv\n"
     ]
    }
   ],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "79a6e2c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T14:22:31.532639Z",
     "iopub.status.busy": "2025-08-18T14:22:31.532037Z",
     "iopub.status.idle": "2025-08-18T14:22:33.837652Z",
     "shell.execute_reply": "2025-08-18T14:22:33.836768Z"
    },
    "papermill": {
     "duration": 2.310685,
     "end_time": "2025-08-18T14:22:33.839366",
     "exception": false,
     "start_time": "2025-08-18T14:22:31.528681",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5ea35091",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T14:22:33.846407Z",
     "iopub.status.busy": "2025-08-18T14:22:33.845983Z",
     "iopub.status.idle": "2025-08-18T14:22:33.893057Z",
     "shell.execute_reply": "2025-08-18T14:22:33.891762Z"
    },
    "papermill": {
     "duration": 0.051999,
     "end_time": "2025-08-18T14:22:33.894502",
     "exception": false,
     "start_time": "2025-08-18T14:22:33.842503",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   fetch_date  rank           id symbol      name  current_price  \\\n",
      "0  2025-08-17     1      bitcoin    btc   Bitcoin     117991.000   \n",
      "1  2025-08-17     2     ethereum    eth  Ethereum       4523.630   \n",
      "2  2025-08-17     3       ripple    xrp       XRP          3.110   \n",
      "3  2025-08-17     4       tether   usdt    Tether          1.001   \n",
      "4  2025-08-17     5  binancecoin    bnb       BNB        857.730   \n",
      "\n",
      "      market_cap  total_volume    high_24h    low_24h  \\\n",
      "0  2349392384648  2.069836e+10  118514.000  117279.00   \n",
      "1   546647752977  2.750048e+10    4563.720    4403.50   \n",
      "2   184733312109  3.439779e+09       3.140       3.09   \n",
      "3   166771046882  6.142726e+10       1.001       1.00   \n",
      "4   119479554114  9.032979e+08     862.740     836.46   \n",
      "\n",
      "   price_change_percentage_24h              last_updated  \n",
      "0                      0.43022  2025-08-17T23:08:21.935Z  \n",
      "1                      2.13433  2025-08-17T23:08:13.107Z  \n",
      "2                      0.04292  2025-08-17T23:08:14.854Z  \n",
      "3                      0.00801  2025-08-17T23:08:15.301Z  \n",
      "4                      2.44015  2025-08-17T23:08:14.852Z  \n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 100 entries, 0 to 99\n",
      "Data columns (total 12 columns):\n",
      " #   Column                       Non-Null Count  Dtype  \n",
      "---  ------                       --------------  -----  \n",
      " 0   fetch_date                   100 non-null    object \n",
      " 1   rank                         100 non-null    int64  \n",
      " 2   id                           100 non-null    object \n",
      " 3   symbol                       100 non-null    object \n",
      " 4   name                         100 non-null    object \n",
      " 5   current_price                100 non-null    float64\n",
      " 6   market_cap                   100 non-null    int64  \n",
      " 7   total_volume                 100 non-null    float64\n",
      " 8   high_24h                     100 non-null    float64\n",
      " 9   low_24h                      100 non-null    float64\n",
      " 10  price_change_percentage_24h  100 non-null    float64\n",
      " 11  last_updated                 100 non-null    object \n",
      "dtypes: float64(5), int64(2), object(5)\n",
      "memory usage: 9.5+ KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_csv(\"/kaggle/input/daily-crypto-tracker-dataset/daily_crypto_tracker.csv\")\n",
    "print(df.head())\n",
    "print(df.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f542754a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T14:22:33.901640Z",
     "iopub.status.busy": "2025-08-18T14:22:33.901326Z",
     "iopub.status.idle": "2025-08-18T14:22:33.914744Z",
     "shell.execute_reply": "2025-08-18T14:22:33.913795Z"
    },
    "papermill": {
     "duration": 0.018478,
     "end_time": "2025-08-18T14:22:33.916154",
     "exception": false,
     "start_time": "2025-08-18T14:22:33.897676",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Features ready: (100, 8)\n",
      "🎯 Target ready: (100,)\n"
     ]
    }
   ],
   "source": [
    "df_clean = df.drop(columns=['price_change_percentage_24h', 'fetch_date', 'id', 'symbol'])\n",
    "df_clean = df_clean.dropna()\n",
    "df_clean['is_gain'] = (\n",
    "    df_clean['current_price'] > df_clean['current_price'].shift(1).fillna(df_clean['current_price'])\n",
    ").astype(int)\n",
    "\n",
    "df_clean = df_clean.dropna()\n",
    "X = df_clean.drop(columns=['is_gain'])\n",
    "y = df_clean['is_gain']\n",
    "print(\"✅ Features ready:\", X.shape)\n",
    "print(\"🎯 Target ready:\", y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d9e75807",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T14:22:33.922983Z",
     "iopub.status.busy": "2025-08-18T14:22:33.922703Z",
     "iopub.status.idle": "2025-08-18T14:22:33.928690Z",
     "shell.execute_reply": "2025-08-18T14:22:33.927989Z"
    },
    "papermill": {
     "duration": 0.010774,
     "end_time": "2025-08-18T14:22:33.929985",
     "exception": false,
     "start_time": "2025-08-18T14:22:33.919211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100, 12)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a92c80f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T14:22:33.936981Z",
     "iopub.status.busy": "2025-08-18T14:22:33.936692Z",
     "iopub.status.idle": "2025-08-18T14:22:33.943879Z",
     "shell.execute_reply": "2025-08-18T14:22:33.943056Z"
    },
    "papermill": {
     "duration": 0.012296,
     "end_time": "2025-08-18T14:22:33.945312",
     "exception": false,
     "start_time": "2025-08-18T14:22:33.933016",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "📂 Train size: (80, 8)\n",
      "📂 Test size: (20, 8)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)\n",
    "print(\"📂 Train size:\", X_train.shape)\n",
    "print(\"📂 Test size:\", X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d86168a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T14:22:33.952490Z",
     "iopub.status.busy": "2025-08-18T14:22:33.952220Z",
     "iopub.status.idle": "2025-08-18T14:22:34.382973Z",
     "shell.execute_reply": "2025-08-18T14:22:34.382075Z"
    },
    "papermill": {
     "duration": 0.435926,
     "end_time": "2025-08-18T14:22:34.384528",
     "exception": false,
     "start_time": "2025-08-18T14:22:33.948602",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "📊 Random Forest Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      0.91      0.83        11\n",
      "           1       0.86      0.67      0.75         9\n",
      "\n",
      "    accuracy                           0.80        20\n",
      "   macro avg       0.81      0.79      0.79        20\n",
      "weighted avg       0.81      0.80      0.80        20\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8\n"
     ]
    }
   ],
   "source": [
    "#1_Random Forest\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
    "\n",
    "# Encode categorical features in X_train and X_test\n",
    "X_train_encoded = pd.get_dummies(X_train)\n",
    "X_test_encoded = pd.get_dummies(X_test)\n",
    "\n",
    "# Align train and test encoded data to have same columns\n",
    "X_train_encoded, X_test_encoded = X_train_encoded.align(X_test_encoded, join='left', axis=1, fill_value=0)\n",
    "\n",
    "rf_model = RandomForestClassifier(random_state=42)\n",
    "rf_model.fit(X_train_encoded, y_train)\n",
    "\n",
    "rf_preds = rf_model.predict(X_test_encoded)\n",
    "\n",
    "print(\"📊 Random Forest Report:\")\n",
    "print(classification_report(y_test, rf_preds))\n",
    "\n",
    "rf_cm = confusion_matrix(y_test, rf_preds)\n",
    "sns.heatmap(rf_cm, annot=True, fmt='d', cmap='Blues')\n",
    "plt.title(\"Random Forest Confusion Matrix\")\n",
    "plt.show()\n",
    "\n",
    "accuracy = accuracy_score(y_test, rf_preds)\n",
    "print(\"Accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c5b08f6b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T14:22:34.393240Z",
     "iopub.status.busy": "2025-08-18T14:22:34.392950Z",
     "iopub.status.idle": "2025-08-18T14:22:34.657258Z",
     "shell.execute_reply": "2025-08-18T14:22:34.656440Z"
    },
    "papermill": {
     "duration": 0.270179,
     "end_time": "2025-08-18T14:22:34.658627",
     "exception": false,
     "start_time": "2025-08-18T14:22:34.388448",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "📊 Logistic Regression Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.55      1.00      0.71        11\n",
      "           1       0.00      0.00      0.00         9\n",
      "\n",
      "    accuracy                           0.55        20\n",
      "   macro avg       0.28      0.50      0.35        20\n",
      "weighted avg       0.30      0.55      0.39        20\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.55\n"
     ]
    }
   ],
   "source": [
    "#2_Logistic Regression\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
    "\n",
    "# Encode categorical features\n",
    "X_train_encoded = pd.get_dummies(X_train)\n",
    "X_test_encoded = pd.get_dummies(X_test)\n",
    "\n",
    "# Align columns of train and test sets\n",
    "X_train_encoded, X_test_encoded = X_train_encoded.align(X_test_encoded, join='left', axis=1, fill_value=0)\n",
    "\n",
    "log_model = LogisticRegression(max_iter=1000)\n",
    "log_model.fit(X_train_encoded, y_train)\n",
    "\n",
    "log_preds = log_model.predict(X_test_encoded)\n",
    "\n",
    "print(\"📊 Logistic Regression Report:\")\n",
    "print(classification_report(y_test, log_preds))\n",
    "\n",
    "log_cm = confusion_matrix(y_test, log_preds)\n",
    "sns.heatmap(log_cm, annot=True, fmt='d', cmap='Purples')\n",
    "plt.title(\"Logistic Regression Confusion Matrix\")\n",
    "plt.show()\n",
    "\n",
    "accuracy = accuracy_score(y_test, log_preds)\n",
    "print(\"Accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cd7605a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T14:22:34.668808Z",
     "iopub.status.busy": "2025-08-18T14:22:34.668248Z",
     "iopub.status.idle": "2025-08-18T14:22:55.470261Z",
     "shell.execute_reply": "2025-08-18T14:22:55.469512Z"
    },
    "papermill": {
     "duration": 20.808834,
     "end_time": "2025-08-18T14:22:55.471798",
     "exception": false,
     "start_time": "2025-08-18T14:22:34.662964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-18 14:22:36.541002: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755526956.779359      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755526956.845417      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-18 14:22:50.084134: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n",
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 131ms/step - accuracy: 0.5214 - loss: 0.6983 - val_accuracy: 0.6500 - val_loss: 0.6730\n",
      "Epoch 2/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 0.5552 - loss: 0.6653 - val_accuracy: 0.6500 - val_loss: 0.6716\n",
      "Epoch 3/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 0.8038 - loss: 0.6103 - val_accuracy: 0.6500 - val_loss: 0.6704\n",
      "Epoch 4/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - accuracy: 0.7434 - loss: 0.5657 - val_accuracy: 0.6500 - val_loss: 0.6695\n",
      "Epoch 5/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 0.8816 - loss: 0.5323 - val_accuracy: 0.6500 - val_loss: 0.6685\n",
      "Epoch 6/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - accuracy: 0.9441 - loss: 0.4923 - val_accuracy: 0.6000 - val_loss: 0.6676\n",
      "Epoch 7/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.9804 - loss: 0.4506 - val_accuracy: 0.6000 - val_loss: 0.6669\n",
      "Epoch 8/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 1.0000 - loss: 0.4229 - val_accuracy: 0.6000 - val_loss: 0.6659\n",
      "Epoch 9/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 0.9741 - loss: 0.4017 - val_accuracy: 0.6000 - val_loss: 0.6654\n",
      "Epoch 10/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 1.0000 - loss: 0.3710 - val_accuracy: 0.6000 - val_loss: 0.6651\n",
      "Epoch 11/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - accuracy: 1.0000 - loss: 0.3253 - val_accuracy: 0.6000 - val_loss: 0.6650\n",
      "Epoch 12/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 1.0000 - loss: 0.2952 - val_accuracy: 0.6000 - val_loss: 0.6648\n",
      "Epoch 13/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 1.0000 - loss: 0.2645 - val_accuracy: 0.6000 - val_loss: 0.6643\n",
      "Epoch 14/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - accuracy: 1.0000 - loss: 0.2575 - val_accuracy: 0.6000 - val_loss: 0.6642\n",
      "Epoch 15/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 1.0000 - loss: 0.2174 - val_accuracy: 0.6000 - val_loss: 0.6646\n",
      "Epoch 16/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - accuracy: 1.0000 - loss: 0.2069 - val_accuracy: 0.6000 - val_loss: 0.6649\n",
      "Epoch 17/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 1.0000 - loss: 0.1730 - val_accuracy: 0.6000 - val_loss: 0.6654\n",
      "Epoch 18/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 1.0000 - loss: 0.1714 - val_accuracy: 0.6000 - val_loss: 0.6660\n",
      "Epoch 19/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 1.0000 - loss: 0.1527 - val_accuracy: 0.6000 - val_loss: 0.6663\n",
      "Epoch 20/20\n",
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - accuracy: 1.0000 - loss: 0.1389 - val_accuracy: 0.6000 - val_loss: 0.6667\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 225ms/step\n",
      "📊 LSTM Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.58      1.00      0.73        11\n",
      "           1       1.00      0.11      0.20         9\n",
      "\n",
      "    accuracy                           0.60        20\n",
      "   macro avg       0.79      0.56      0.47        20\n",
      "weighted avg       0.77      0.60      0.49        20\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.6\n"
     ]
    }
   ],
   "source": [
    "#3_LSTM\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import LSTM, Dense, Dropout\n",
    "\n",
    "#=============================\n",
    "# 1. Encode target variable if categorical\n",
    "#=============================\n",
    "if y_train.dtype == 'object':\n",
    "    le = LabelEncoder()\n",
    "    y_train = le.fit_transform(y_train)\n",
    "    y_test = le.transform(y_test)\n",
    "\n",
    "#=============================\n",
    "# 2. Encode categorical features\n",
    "#=============================\n",
    "X_train_encoded = pd.get_dummies(X_train)\n",
    "X_test_encoded = pd.get_dummies(X_test)\n",
    "\n",
    "# Align train/test columns\n",
    "X_train_encoded, X_test_encoded = X_train_encoded.align(X_test_encoded, join='left', axis=1, fill_value=0)\n",
    "\n",
    "#=============================\n",
    "# 3. Scale features\n",
    "#=============================\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train_encoded)\n",
    "X_test_scaled = scaler.transform(X_test_encoded)\n",
    "\n",
    "#=============================\n",
    "# 4. Reshape for LSTM [samples, timesteps, features]\n",
    "#=============================\n",
    "# এখানে timesteps=1 দেওয়া হলো (যদি multi-step sequence লাগলে পরিবর্তন করো)\n",
    "X_train_lstm = X_train_scaled.reshape((X_train_scaled.shape[0], 1, X_train_scaled.shape[1]))\n",
    "X_test_lstm = X_test_scaled.reshape((X_test_scaled.shape[0], 1, X_test_scaled.shape[1]))\n",
    "\n",
    "#=============================\n",
    "# 5. Build LSTM model\n",
    "#=============================\n",
    "model = Sequential()\n",
    "model.add(LSTM(64, input_shape=(X_train_lstm.shape[1], X_train_lstm.shape[2]), activation='tanh'))\n",
    "model.add(Dropout(0.3))\n",
    "model.add(Dense(1, activation='sigmoid'))  # Binary classification; multi-class হলে softmax\n",
    "\n",
    "model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "#=============================\n",
    "# 6. Train model\n",
    "#=============================\n",
    "history = model.fit(X_train_lstm, y_train,\n",
    "                    epochs=20,\n",
    "                    batch_size=16,\n",
    "                    validation_data=(X_test_lstm, y_test),\n",
    "                    verbose=1)\n",
    "\n",
    "#=============================\n",
    "# 7. Predictions\n",
    "#=============================\n",
    "y_pred_prob = model.predict(X_test_lstm)\n",
    "y_pred = (y_pred_prob > 0.5).astype(int)\n",
    "\n",
    "#=============================\n",
    "# 8. Evaluation\n",
    "#=============================\n",
    "print(\"📊 LSTM Report:\")\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "lstm_cm = confusion_matrix(y_test, y_pred)\n",
    "sns.heatmap(lstm_cm, annot=True, fmt='d', cmap='Oranges')\n",
    "plt.title(\"LSTM Confusion Matrix\")\n",
    "plt.show()\n",
    "\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1091ed14",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T14:22:55.488819Z",
     "iopub.status.busy": "2025-08-18T14:22:55.487925Z",
     "iopub.status.idle": "2025-08-18T14:22:59.704477Z",
     "shell.execute_reply": "2025-08-18T14:22:59.703453Z"
    },
    "papermill": {
     "duration": 4.226261,
     "end_time": "2025-08-18T14:22:59.705976",
     "exception": false,
     "start_time": "2025-08-18T14:22:55.479715",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "1/1 - 4s - 4s/step - accuracy: 0.5312 - loss: 0.6900 - val_accuracy: 0.6250 - val_loss: 0.6936\n",
      "Epoch 2/50\n",
      "1/1 - 0s - 83ms/step - accuracy: 0.5000 - loss: 0.6933 - val_accuracy: 0.6250 - val_loss: 0.6933\n",
      "Epoch 3/50\n",
      "1/1 - 0s - 81ms/step - accuracy: 0.5312 - loss: 0.6912 - val_accuracy: 0.6250 - val_loss: 0.6935\n",
      "Epoch 4/50\n",
      "1/1 - 0s - 78ms/step - accuracy: 0.6875 - loss: 0.6890 - val_accuracy: 0.5000 - val_loss: 0.6940\n",
      "Epoch 5/50\n",
      "1/1 - 0s - 78ms/step - accuracy: 0.6875 - loss: 0.6900 - val_accuracy: 0.5000 - val_loss: 0.6944\n",
      "Final Test Accuracy: 62.50%\n"
     ]
    }
   ],
   "source": [
    "#4_GRU Model Code\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "import random\n",
    "\n",
    "# 1. Fix seeds for reproducibility\n",
    "seed = 42\n",
    "np.random.seed(seed)\n",
    "tf.random.set_seed(seed)\n",
    "random.seed(seed)\n",
    "\n",
    "# 2. Your other imports and code\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, Embedding, GRU, Dense, Dropout\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from sklearn.model_selection import train_test_split\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# 3. Your dataset and preprocessing\n",
    "texts = [\n",
    "    # Positive examples (20)\n",
    "    'this is a great movie', 'i really enjoyed this film', 'the movie was fantastic', 'absolutely brilliant plot',\n",
    "    'i loved this movie', 'one of the best films ever', 'superb acting by the cast', 'a truly moving story',\n",
    "    'highly recommend this picture', 'wonderful experience from start to finish', 'two thumbs up', 'amazing direction',\n",
    "    'a must-see film for everyone', 'the visuals were stunning', 'excellent screenplay', 'perfect in every way',\n",
    "    'i was captivated throughout', 'an unforgettable journey', 'the soundtrack was beautiful', 'masterfully crafted',\n",
    "    # Negative examples (20)\n",
    "    'this movie was terrible', 'i did not like the film', 'the acting was awful', 'a complete waste of time',\n",
    "    'i hated every moment of it', 'the plot was boring and predictable', 'worst film of the year', 'do not watch this',\n",
    "    'a disappointing experience', 'the script was very weak', 'i fell asleep halfway through', 'a total failure',\n",
    "    'the characters were one-dimensional', 'it was incredibly slow', 'nothing special about it', 'i want my money back',\n",
    "    'a confusing and messy plot', 'the ending was horrible', 'poorly executed idea', 'I would not recommend it'\n",
    "]\n",
    "labels = np.array([1]*20 + [0]*20)\n",
    "\n",
    "tokenizer = Tokenizer(num_words=2000, oov_token=\"<unk>\")\n",
    "tokenizer.fit_on_texts(texts)\n",
    "sequences = tokenizer.texts_to_sequences(texts)\n",
    "max_length = max(len(seq) for seq in sequences)\n",
    "padded_sequences = pad_sequences(sequences, maxlen=max_length, padding='post')\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    padded_sequences, labels, test_size=0.2, random_state=seed\n",
    ")\n",
    "\n",
    "vocab_size = len(tokenizer.word_index) + 1\n",
    "embedding_dim = 32\n",
    "\n",
    "model = Sequential([\n",
    "    Input(shape=(max_length,)),\n",
    "    Embedding(input_dim=vocab_size, output_dim=embedding_dim),\n",
    "    GRU(units=64),\n",
    "    Dropout(0.5),\n",
    "    Dense(units=1, activation='sigmoid')\n",
    "])\n",
    "\n",
    "model.compile(optimizer='adam',\n",
    "              loss='binary_crossentropy',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "early_stopping = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n",
    "\n",
    "history = model.fit(X_train, y_train,\n",
    "                    epochs=50,\n",
    "                    validation_data=(X_test, y_test),\n",
    "                    callbacks=[early_stopping],\n",
    "                    verbose=2)\n",
    "\n",
    "loss, accuracy = model.evaluate(X_test, y_test, verbose=0)\n",
    "print(f\"Final Test Accuracy: {accuracy*100:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "66f944cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T14:22:59.724138Z",
     "iopub.status.busy": "2025-08-18T14:22:59.723833Z",
     "iopub.status.idle": "2025-08-18T14:22:59.729779Z",
     "shell.execute_reply": "2025-08-18T14:22:59.729172Z"
    },
    "papermill": {
     "duration": 0.016104,
     "end_time": "2025-08-18T14:22:59.731243",
     "exception": false,
     "start_time": "2025-08-18T14:22:59.715139",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Ensure X_train / X_test are DataFrames\n",
    "if isinstance(X_train, np.ndarray):\n",
    "    X_train = pd.DataFrame(X_train)\n",
    "if isinstance(X_test, np.ndarray):\n",
    "    X_test = pd.DataFrame(X_test)\n",
    "\n",
    "# Now safe to handle categoricals\n",
    "categorical_cols = X_train.select_dtypes(include=['object']).columns\n",
    "\n",
    "if len(categorical_cols) > 0:\n",
    "    X_train_encoded = pd.get_dummies(X_train, columns=categorical_cols)\n",
    "    X_test_encoded = pd.get_dummies(X_test, columns=categorical_cols)\n",
    "    X_train_encoded, X_test_encoded = X_train_encoded.align(X_test_encoded, join='left', axis=1, fill_value=0)\n",
    "else:\n",
    "    X_train_encoded, X_test_encoded = X_train, X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "be96cede",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T14:22:59.748874Z",
     "iopub.status.busy": "2025-08-18T14:22:59.748574Z",
     "iopub.status.idle": "2025-08-18T14:23:00.385597Z",
     "shell.execute_reply": "2025-08-18T14:23:00.384538Z"
    },
    "papermill": {
     "duration": 0.64771,
     "end_time": "2025-08-18T14:23:00.387202",
     "exception": false,
     "start_time": "2025-08-18T14:22:59.739492",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\tTest-logloss:0.66664\n",
      "[1]\tTest-logloss:0.64789\n",
      "[2]\tTest-logloss:0.61323\n",
      "[3]\tTest-logloss:0.59510\n",
      "[4]\tTest-logloss:0.58762\n",
      "[5]\tTest-logloss:0.55896\n",
      "[6]\tTest-logloss:0.54187\n",
      "[7]\tTest-logloss:0.53491\n",
      "[8]\tTest-logloss:0.52293\n",
      "[9]\tTest-logloss:0.53101\n",
      "[10]\tTest-logloss:0.53503\n",
      "[11]\tTest-logloss:0.51775\n",
      "[12]\tTest-logloss:0.50183\n",
      "[13]\tTest-logloss:0.50622\n",
      "[14]\tTest-logloss:0.51251\n",
      "[15]\tTest-logloss:0.51246\n",
      "[16]\tTest-logloss:0.51942\n",
      "[17]\tTest-logloss:0.51271\n",
      "[18]\tTest-logloss:0.51604\n",
      "[19]\tTest-logloss:0.51330\n",
      "[20]\tTest-logloss:0.49905\n",
      "[21]\tTest-logloss:0.50631\n",
      "[22]\tTest-logloss:0.50851\n",
      "[23]\tTest-logloss:0.50322\n",
      "[24]\tTest-logloss:0.50574\n",
      "[25]\tTest-logloss:0.49419\n",
      "[26]\tTest-logloss:0.50232\n",
      "[27]\tTest-logloss:0.50518\n",
      "[28]\tTest-logloss:0.51507\n",
      "[29]\tTest-logloss:0.51643\n",
      "[30]\tTest-logloss:0.52295\n",
      "[31]\tTest-logloss:0.52626\n",
      "[32]\tTest-logloss:0.52353\n",
      "[33]\tTest-logloss:0.52840\n",
      "[34]\tTest-logloss:0.52953\n",
      "[35]\tTest-logloss:0.53949\n",
      "[36]\tTest-logloss:0.54666\n",
      "[37]\tTest-logloss:0.54834\n",
      "[38]\tTest-logloss:0.55621\n",
      "[39]\tTest-logloss:0.56413\n",
      "[40]\tTest-logloss:0.56760\n",
      "[41]\tTest-logloss:0.56405\n",
      "[42]\tTest-logloss:0.56554\n",
      "[43]\tTest-logloss:0.57064\n",
      "[44]\tTest-logloss:0.57139\n",
      "[45]\tTest-logloss:0.57838\n",
      "📊 XGBoost Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.33      0.50         3\n",
      "           1       0.71      1.00      0.83         5\n",
      "\n",
      "    accuracy                           0.75         8\n",
      "   macro avg       0.86      0.67      0.67         8\n",
      "weighted avg       0.82      0.75      0.71         8\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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R45UQkKCnnzySRUUFJQ6vuuvv14jR45UZmamBg0apKuvvlr79u1TWlqakpOT9cADD5z1OwIXRKj/skBopaenG0kmMjLSbNy40e/9m266yUgyR44c8Zl/4sQJc/DgQe90enV9pipTkklJSTHFxcXeZQ8cOGCio6NNz549TVFRkXf+tGnTjCQza9YsY4wxhYWFJjEx0bRq1cqcOHHCu9zixYuNJPPkk08aY4w5fPjwGbsFpytPa7ZkH5TWQShN27ZtTWJiojl06JB33tdff20iIiLM3Xff7Z1XUrHfc889fturXbu2z7zSqtVAK/ZA94m1Yp88ebKR5HOYpbCw0HTs2NFUq1bNHD161Gd7tWvXNj///LN32ffff99IMosWLSpzuyXf45133jGLFy82LpfL/PTTT8YYYx599FHTpEmTM+6D48eP+62vV69e3s+UONPPu6Qq79y5szl16lSp753e1SgoKDCXX365admypTl58qTp16+fiY2NNT/++GOZ3xG4kDgr/iIXHx8vSapfv36pZxwfPXpUklStWjWf+S+++KISEhK8U+fOnf0+e//992vZsmVatmyZ3n33XaWmpmrmzJkaM2aMd5nly5ersLBQo0ePVkTEf38d77vvPsXGxuqDDz6QJG3YsEEHDhzQyJEjFRMT412uX79+SkpK8i5XuXJlRUdHKzs7W4cPHz7X3VLqPqhevfpZl923b582b96sYcOGqVatWt75rVu31g033OB3Ypgkv0rvuuuu06FDh7zbPV/nuk8+/PBD1a1bV0OGDPHOq1Spkh588EHl5+dr5cqVPsvfdtttqlmzpvf1ddddJ0natWtXwNvs2bOnatWqpblz58oYo7lz5/ps36py5cref8/Ly1Nubq66du2qXbt2KS8vL+Dt3nfffYqMjDzrclWqVFFWVpa2bdumLl266IMPPtBzzz2nBg0aBLwtoKIR7BexPXv2KCMjQ61atdKePXv0zDPP+C1TEmb5+fk+82+++WZvaLdu3brU9Tdr1kzJyclKTk7W4MGDNW3aNI0cOVKTJ0/Wli1bJEk//vijJOnKK6/0+Wx0dLSaNGniff9My0lSUlKS9323260JEyZoyZIlqlOnjrp06aJnnnlGOTk5Ae8Xq9jYWEnSsWPHzrpsWeNs3ry5cnNz/Vq91lAoCcdg/WFyrvvkxx9/VLNmzXz+4JJ+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\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7500\n",
      "ROC-AUC: 0.8000\n"
     ]
    }
   ],
   "source": [
    "#5_XGBoost\n",
    "import xgboost as xgb\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_auc_score\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Handle categorical only\n",
    "categorical_cols = X_train.select_dtypes(include=['object']).columns\n",
    "if len(categorical_cols) > 0:\n",
    "    X_train_encoded = pd.get_dummies(X_train, columns=categorical_cols)\n",
    "    X_test_encoded = pd.get_dummies(X_test, columns=categorical_cols)\n",
    "    X_train_encoded, X_test_encoded = X_train_encoded.align(X_test_encoded, join='left', axis=1, fill_value=0)\n",
    "else:\n",
    "    X_train_encoded, X_test_encoded = X_train, X_test\n",
    "\n",
    "# Convert to DMatrix\n",
    "dtrain = xgb.DMatrix(X_train_encoded, label=y_train)\n",
    "dtest = xgb.DMatrix(X_test_encoded, label=y_test)\n",
    "\n",
    "# Parameters\n",
    "params = {\n",
    "    'objective': 'binary:logistic',\n",
    "    'eval_metric': 'logloss',\n",
    "    'eta': 0.1,\n",
    "    'max_depth': 6,\n",
    "    'subsample': 0.8,\n",
    "    'colsample_bytree': 0.8,\n",
    "    'seed': 42\n",
    "}\n",
    "\n",
    "# Train model\n",
    "xgb_model = xgb.train(params, dtrain, num_boost_round=200,\n",
    "                      evals=[(dtest, \"Test\")], early_stopping_rounds=20)\n",
    "\n",
    "# Predict\n",
    "xgb_preds_prob = xgb_model.predict(dtest)\n",
    "xgb_preds = (xgb_preds_prob > 0.5).astype(int)\n",
    "\n",
    "# Evaluation\n",
    "print(\"📊 XGBoost Report:\")\n",
    "print(classification_report(y_test, xgb_preds))\n",
    "\n",
    "xgb_cm = confusion_matrix(y_test, xgb_preds)\n",
    "sns.heatmap(xgb_cm, annot=True, fmt='d', cmap='Greens')\n",
    "plt.title(\"XGBoost Confusion Matrix\")\n",
    "plt.show()\n",
    "\n",
    "accuracy = accuracy_score(y_test, xgb_preds)\n",
    "roc_auc = roc_auc_score(y_test, xgb_preds_prob)\n",
    "print(f\"Accuracy: {accuracy:.4f}\")\n",
    "print(f\"ROC-AUC: {roc_auc:.4f}\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7855118,
     "sourceId": 12791677,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 38.069528,
   "end_time": "2025-08-18T14:23:03.437867",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-18T14:22:25.368339",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
